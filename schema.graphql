type Query {
  hello: String!
  videoClips(limit: Int = 12, offset: Int = 0, searchQuery: String): [VideoClip!]!
  videoClip(id: String!): VideoClip
  myVideoClips: [VideoClip!]!
}

type VideoClip {
  id: ID!
  name: String!
  description: String!
  userId: String!
  userEmail: String!
  s3Key: String
  videoUrl: String
  shareUrl: String
  script: String
  duration: Float
  characters: [String!]
  tags: [String!]
  thumbnailUrl: String
  blurhash: String
  source: VideoClipSource
  createdAt: String!
  updatedAt: String
  updatedBy: String
}

union VideoClipSource = ShowSource | MovieSource

type ShowSource {
  title: String!
  airDate: String
  season: Int
  episode: Int
  start: Float
  end: Float
}

type MovieSource {
  title: String!
  releaseDate: String
  start: Float
  end: Float
}

type Mutation {
  createVideoClip(input: CreateVideoClipInput!): VideoClip!
  updateVideoClip(input: UpdateVideoClipInput!): VideoClip!
  generateUploadUrl(contentType: String!, fileName: String!, thumbnailContentType: String, thumbnailFileName: String): PresignedUrlResponse!
}

input CreateVideoClipInput {
  name: String!
  description: String!
  s3Key: String
  videoUrl: String
  script: String
  duration: Float
  characters: [String!]
  tags: [String!]
  thumbnailUrl: String
  blurhash: String
  source: VideoClipSourceInput
}

input UpdateVideoClipInput {
  id: ID!
  description: String
  shareUrl: String
  script: String
  duration: Float
  characters: [String!]
  tags: [String!]
  source: VideoClipSourceInput
}

input VideoClipSourceInput {
  show: ShowSourceInput
  movie: MovieSourceInput
}

input ShowSourceInput {
  title: String!
  airDate: String
  season: Int
  episode: Int
  start: Float
  end: Float
}

input MovieSourceInput {
  title: String!
  releaseDate: String
  start: Float
  end: Float
}

type PresignedUrlResponse {
  uploadUrl: String!
  s3Key: String!
  videoUrl: String!
  thumbnailUploadUrl: String
  thumbnailS3Key: String
  thumbnailUrl: String
}